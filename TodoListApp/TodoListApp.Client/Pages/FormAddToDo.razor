@page "/add_todo"

@using TodoListApp.Client.Models
@using TodoListApp.Client.service
@using Blazored.LocalStorage

@inject ToDoItemDataService ToDoItemDataService
@inject PersonDataService PersonDataService
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigation

<PageTitle>Form Page</PageTitle>
<div class="d-flex align-items-center justify-content-center">
    <div class="d-flex flex-column w-50 justify-content-center align-items-center">
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H2">Add New To Do</RadzenText>
        <RadzenCard class="d-flex flex-column w-100 justify-content-center gap-3 p-12">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">To Do</RadzenText>
            <RadzenTextBox @bind-Value="NewTask.Name" Placeholder="Enter to do name..." Style="width: 100%" />

            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Category</RadzenText>
            <RadzenDropDown @bind-Value="NewTask.Category" Data="@(Enum.GetValues<Category>())"
                Placeholder="Select category" Style="width: 100%" />

            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Assigned Person</RadzenText>
            <RadzenDropDown @bind-Value="NewTask.PersonId" Data="@People" TextProperty="Name" ValueProperty="Id"
                Placeholder="Select a person" Style="width: 100%" />

            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Deadline</RadzenText>
            <RadzenDatePicker @bind-Value="NewTask.Deadline" Placeholder="Select deadline" Style="width: 100%" />

            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Status</RadzenText>
            <div class="d-flex gap-2 align-items-center">
                <RadzenCheckBox @bind-Value="NewTask.Status" /> Completed
            </div>

            <RadzenButton Text="Add Task" Click="@AddTask" />
        </RadzenCard>
    </div>
</div>

@code {
    private List<ToDoItem> Tasks = new();
    private List<Person> People = new();
    private ToDoItem NewTask = new();

    protected override async Task OnInitializedAsync()
    {
        await GetPeopleFromLocalStorage();
    }

    async Task GetPeopleFromLocalStorage()
    {
        try
        {
            People = await PersonDataService.GetPeopleAsync();
        }
        catch (Exception)
        {
            Console.WriteLine("error reading 'tasks'");
        }
    }

    private async Task AddTask()
    {
        try
        {
            await ToDoItemDataService.AddTaskAsync(NewTask);
            NewTask = new ToDoItem();

            Navigation.NavigateTo("/todo_list");
        }
        catch (Exception)
        {
            Console.WriteLine("error adding task");
        }
    }
}
